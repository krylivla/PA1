#ifndef __PROGTEST__
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#endif /* __PROGTEST__ */

bool LeapYear(int year) {
    return (year % 4 == 0) ^ (year % 100 != 0) ^ (year % 400 == 0) ^ (year % 4000 != 0);
}

int numberOfLeapYearsFrom1600(int year) {
    int numberOfLeapYears = 0;
    for (int i = 1601; i < year; i++) {
        if (LeapYear(i) == 1)
            numberOfLeapYears += 1;
    }
    return numberOfLeapYears;
}

long long int numberOfDaysFrom1600(int year, int month, int day) {
    long long int numberOfDays;
    int numM = 0;
    int numY = numberOfLeapYearsFrom1600(year);
    int days[13] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    for (int i = 0; i < month; i++) {
        numM += days[i];
    }
    numberOfDays = (((year - numY) - 1600) * 365) + (numY * 366) + (numM + day);
    if (month > 2) {
        numberOfDays = LeapYear(year) ? numberOfDays + 1 : numberOfDays;
    }
    return numberOfDays;
}

long long int numberOfMinutes(int hour, int minute) {
    return (hour * 60) + minute;
}

int energyConsumption(int y1, int m1, int d1, int h1, int i1,
                      int y2, int m2, int d2, int h2, int i2, long long int* consumption)
{
    //    10 sec = 0 -> 0 = 30J
    //    60 sec = 00 -> 00 = 200J
    //    60 min = 00:00 -> 00:00 = 12 200J
    //    24 h = 00:00:00 -> 00:00:00 = 292 886J

    int joulePerDay = 292886;
    int joulePer60Min = 12200;
    int joulePer60Sec = 200;
    int year1 = y1, year2 = y2, month1 = m1, month2 = m2, day1 = d1, day2 = d2, hour1 = h1, hour2 = h2, minute1 = i1, minute2 = i2;
    long long int toDays1, toDays2, toMinutes1, toMinutes2, diffDays = 0, diffMinutes = 0, diffHours = 0, diffLess60 = 0;

    int perHour[24] = { 4,5,2,3,3,1,5,4,1,6,4,5,2,3,3,1,5,4,1,7,4,5,2,6 };
    int perMinute[60] = { 4,5,2,3,3,1,5,4,1,6, 4,5,2,3,3,1,5,4,1,7, 4,5,2,3,3,1,5,4,1,4, 4,5,2,3,3,1,5,4,1,5, 4,5,2,3,3,1,5,4,1,5, 4,5,2,3,3,1,5,4,1,5};

    if (year1 <= 1600 || year2 <= 1600 ||
        month1 < 1 || month1 > 12 || month2 < 1 || month2 > 12 ||
        day1 < 1 || day2 < 1 || hour1 < 0 || hour1 > 23 || hour2 < 0 || hour2 > 23 ||
        minute1 < 0 || minute1 > 59 || minute2 < 0 || minute2 > 59) {
        return 0;
    }
    if ((month1 == 2 && LeapYear(year1) == 0 && day1 > 28) ||
        (month2 == 2 && LeapYear(year2) == 0 && day2 > 28) ||
        (month1 == 2 && LeapYear(year1) == 1 && day1 > 29) ||
        (month2 == 2 && LeapYear(year2) == 1 && day2 > 29) ||
        ((month1 == 1 || month1 == 3 || month1 == 5 || month1 == 7 || month1 == 8 || month1 == 10 || month1 == 12) && day1 > 31) ||
        ((month2 == 1 || month2 == 3 || month2 == 5 || month2 == 7 || month2 == 8 || month2 == 10 || month2 == 12) && day2 > 31) ||
        ((month1 == 2 || month1 == 4 || month1 == 6 || month1 == 9 || month1 == 11) && day1 > 30) ||
        ((month2 == 2 || month2 == 4 || month2 == 6 || month2 == 9 || month2 == 11) && day2 > 30)) {
        return 0;
    }

    toDays1 = numberOfDaysFrom1600(year1, month1, day1);
    toDays2 = numberOfDaysFrom1600(year2, month2, day2);
    toMinutes1 = numberOfMinutes(hour1, minute1);
    toMinutes2 = numberOfMinutes(hour2, minute2);

    if ((toDays1 > toDays2) || (toDays1 == toDays2 && toMinutes1 > toMinutes2)) {
        return 0;
    }

    if (toMinutes1 > toMinutes2) {
        toDays2 = toDays2 - 1;
        toMinutes2 = toMinutes2 + 1440;
    }
    diffDays = (toDays2 - toDays1) * joulePerDay;

    diffLess60 = (toMinutes2 - toMinutes1) % 60;

    diffMinutes = (((toMinutes2 - toMinutes1) - diffLess60) /60 *joulePer60Min) + (diffLess60 * joulePer60Sec);

    if (minute1 < minute2) {
        for (int i = minute1; i < minute2; i++) {
            diffMinutes = diffMinutes + perMinute[i];
        }
    }
    else if (minute1 > minute2) {
        for (int i = minute1; i < 60; ++i) {
            diffMinutes = diffMinutes + perMinute[i];
        }
        for (int i = 0; i < minute2; ++i) {
            diffMinutes = diffMinutes + perMinute[i];
        }
    }

    //tempDoubleHours = ((double)(toMinutes2 - toMinutes1)) / 60 * joulePer60Min;
    //diffMinutes = (long long int)tempDoubleHours;

    diffHours = 0;
    if (hour1 < hour2) {
        for (int i = hour1; i < hour2; i++) {
            diffHours = diffHours + perHour[i];
        }
    }
    else if (hour1 > hour2) {
        for (int i = hour1; i < 24; ++i) {
            diffHours = diffHours + perHour[i];
        }
        for (int i = 0; i < hour2; ++i) {
            diffHours = diffHours + perHour[i];
        }
    }

    *consumption = diffDays + diffMinutes + diffHours;
    return 1;
}

#ifndef __PROGTEST__
int main(int argc, char* argv[])
{
    long long int consumption;

    assert(energyConsumption(2021, 10, 1, 13, 15,
                             2021, 10, 1, 18, 45, &consumption) == 1
           && consumption == 67116LL);
    assert(energyConsumption(2021, 10, 1, 13, 15,
                             2021, 10, 2, 11, 20, &consumption) == 1
           && consumption == 269497LL);
    assert(energyConsumption(2021, 1, 1, 13, 15,
                             2021, 10, 5, 11, 20, &consumption) == 1
           && consumption == 81106033LL);
    assert(energyConsumption(2024, 1, 1, 13, 15,
                             2024, 10, 5, 11, 20, &consumption) == 1
           && consumption == 81398919LL);
    assert(energyConsumption(1900, 1, 1, 13, 15,
                             1900, 10, 5, 11, 20, &consumption) == 1
           && consumption == 81106033LL);
    assert(energyConsumption(2021, 10, 1, 0, 0,
                             2021, 10, 1, 12, 0, &consumption) == 1
           && consumption == 146443LL);
    assert(energyConsumption(2021, 10, 1, 0, 15,
                             2021, 10, 1, 0, 25, &consumption) == 1
           && consumption == 2035LL);
    assert(energyConsumption(2021, 10, 1, 12, 0,
                             2021, 10, 1, 12, 0, &consumption) == 1
           && consumption == 0LL);
    assert(energyConsumption(2021, 10, 1, 12, 0,
                             2021, 10, 1, 12, 1, &consumption) == 1
           && consumption == 204LL);
    assert(energyConsumption(2021, 11, 1, 12, 0,
                             2021, 10, 1, 12, 0, &consumption) == 0);
    assert(energyConsumption(2021, 10, 32, 12, 0,
                             2021, 11, 10, 12, 0, &consumption) == 0);
    assert(energyConsumption(2100, 2, 29, 12, 0,
                             2100, 2, 29, 12, 0, &consumption) == 0);
    assert(energyConsumption(2400, 2, 29, 12, 0,
                             2400, 2, 29, 12, 0, &consumption) == 1
           && consumption == 0LL);

    return 0;
}
#endif /* __PROGTEST__ */
